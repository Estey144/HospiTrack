package com.edigest.HospiTrack.service;

import com.edigest.HospiTrack.entity.Patient;
import com.edigest.HospiTrack.entity.Users;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Service;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.Timestamp;

@Service
public class SignupService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    /**
     * Registers a new patient by first creating a user entry and then the patient entry.
     *
     * @param patient Patient entity with additional patient info
     * @param user    User entity with basic user info
     * @return generated userId as String on success, "exists" if email exists, or "error" on failure
     * //
     */
//    public String registerPatient(Patient patient, Users user) {
//        try {
//            // Check if email already exists
//            Integer count = jdbcTemplate.queryForObject(
//                    "SELECT COUNT(*) FROM USERS WHERE EMAIL = ?",
//                    new Object[]{user.getEmail()},
//                    Integer.class
//            );
//
//            if (count != null && count > 0) {
//                return "exists";  // Email already registered
//            }
//
//            // Insert user and get generated ID
//            String insertUserSql = "INSERT INTO USERS (NAME, EMAIL, PASSWORD, PHONE, ROLE, CREATED_AT) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)";
//            KeyHolder keyHolder = new GeneratedKeyHolder();
//
//            jdbcTemplate.update(connection -> {
//                PreparedStatement ps = connection.prepareStatement(insertUserSql, Statement.RETURN_GENERATED_KEYS);
//                ps.setString(1, user.getName());
//                ps.setString(2, user.getEmail());
//                ps.setString(3, user.getPassword()); // Consider hashing password in production!
//                ps.setString(4, user.getPhone());
//                ps.setString(5, "patient");
//                return ps;
//            }, keyHolder);
//
//            Number key = keyHolder.getKey();
//            if (key == null) {
//                throw new RuntimeException("Failed to retrieve generated user ID.");
//            }
//            Long generatedUserId = key.longValue();
//
//            // Prepare DOB timestamp safely
//            Timestamp dobTimestamp = null;
//            if (patient.getDob() != null) {
//                dobTimestamp = new Timestamp(patient.getDob().getTime());
//            }
//
//            // Insert patient data, userId as String because your patient.userId is String
//            String insertPatientSql = "INSERT INTO PATIENTS (USER_ID, DOB, GENDER, BLOOD_TYPE, ADDRESS, EMERGENCY_CONTACT) VALUES (?, ?, ?, ?, ?, ?)";
//
//            jdbcTemplate.update(insertPatientSql,
//                    String.valueOf(generatedUserId),
//                    dobTimestamp,
//                    patient.getGender(),
//                    patient.getBloodType(),
//                    patient.getAddress(),
//                    patient.getEmergencyContact()
//            );
//
//            return String.valueOf(generatedUserId);
//
//        } catch (Exception e) {
//            e.printStackTrace();
//            return "error";
//        }
//    }
//}
    public String registerPatient(Patient patient, Users user) {
        try {
            // 1. Check if email already exists
            Integer count = jdbcTemplate.queryForObject(
                    "SELECT COUNT(*) FROM USERS WHERE EMAIL = ?",
                    new Object[]{user.getEmail().toLowerCase()}, // normalize email
                    Integer.class
            );
            if (count != null && count > 0) {
                return "exists";
            }

            // 2. Insert user (ID will be auto-generated by trigger)
            String insertUserSql = """
            INSERT INTO USERS (NAME, EMAIL, PASSWORD, PHONE, ROLE, CREATED_AT)
            VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        """;

            jdbcTemplate.update(insertUserSql,
                    user.getName().toLowerCase(),
                    user.getEmail().toLowerCase(),
                    user.getPassword(), // hash in production
                    user.getPhone(),
                    "patient"
            );

            // 3. Get generated ID by fetching just inserted user
            Long userId = jdbcTemplate.queryForObject(
                    "SELECT ID FROM USERS WHERE EMAIL = ?",
                    new Object[]{user.getEmail().toLowerCase()},
                    Long.class
            );

            // 4. Insert into patient table with foreign key reference
            jdbcTemplate.update("""
            INSERT INTO PATIENTS (USER_ID, DOB, GENDER, BLOOD_TYPE, ADDRESS, EMERGENCY_CONTACT)
            VALUES (?, ?, ?, ?, ?, ?)
        """,
                    String.valueOf(userId),
                    patient.getDob(),
                    patient.getGender(),
                    patient.getBloodType(),
                    patient.getAddress(),
                    patient.getEmergencyContact()
            );

            return "success";

        } catch (Exception e) {
            e.printStackTrace();
            return "error";
        }
    }

}