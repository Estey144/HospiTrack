================================================================================
                    HospiTrack - SQL Queries from Java Service Files
================================================================================
Generated on: July 30, 2025
Description: This file contains all SQL queries extracted from the Java service 
             files in the Backend/src/main/java/com/edigest/HospiTrack/service/ directory

================================================================================
                               TABLE OF CONTENTS
================================================================================
1. DepartmentService.java
2. DoctorService.java
3. PatientService.java
4. AppointmentService.java
5. PrescriptionService.java
6. BillService.java
7. UsersService.java
8. LabTestService.java
9. MedicalRecordService.java
10. FeedbackService.java
11. AmbulanceService.java
12. AmbulanceRequestService.java
13. HospitalBranchService.java
14. RoomService.java
15. EquipmentService.java
16. StaffService.java
17. InsuranceService.java
18. SignupService.java
19. StatsService.java

================================================================================

################################################################################
##                           1. DEPARTMENTSERVICE.JAVA                        ##
################################################################################

-- Get all departments
SELECT * FROM Departments;

-- Get department by ID
SELECT * FROM Departments WHERE id = ?;

-- Insert department
INSERT INTO Departments (id, name, description) VALUES (?, ?, ?);

-- Delete department by ID
DELETE FROM Departments WHERE id = ?;

################################################################################
##                           2. DOCTORSERVICE.JAVA                            ##
################################################################################

-- Get all doctors
SELECT * FROM Doctors;

-- Get doctor by ID
SELECT * FROM Doctors WHERE id = ?;

-- Insert doctor
INSERT INTO Doctors (id, user_id, branch_id, license_number, experience_years, available_hours, department_id, image_url) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

-- Update doctor
UPDATE Doctors SET user_id = ?, branch_id = ?, license_number = ?, 
experience_years = ?, available_hours = ?, department_id = ?, image_url = ? WHERE id = ?;

-- Delete doctor
DELETE FROM Doctors WHERE id = ?;

-- Count doctors
SELECT COUNT(*) FROM Users WHERE role = 'doctor';

-- Get all doctors for frontend with joins
SELECT d.id AS doctorId,
       u.name AS doctorName,
       d.experience_years AS experienceYears,
       d.license_number AS licenseNumber,
       d.available_hours AS availableHours,
       dep.name AS departmentName,
       hb.name AS branchName,
       d.image_url AS imageUrl
FROM Doctors d
JOIN Users u ON d.user_id = u.id
JOIN Departments dep ON d.department_id = dep.id
JOIN Hospital_Branches hb ON d.branch_id = hb.id;

-- Get doctors for feedback form
SELECT d.id AS doctorId,
       u.name AS doctorName,
       dep.name AS departmentName
FROM Doctors d
INNER JOIN Users u ON d.user_id = u.id
INNER JOIN Departments dep ON d.department_id = dep.id
WHERE u.name IS NOT NULL 
ORDER BY u.name;

################################################################################
##                           3. PATIENTSERVICE.JAVA                           ##
################################################################################

-- Get all patients
SELECT * FROM Patients;

-- Get all patients with names from Users table
SELECT p.id, p.user_id, u.name, p.dob, p.gender, p.blood_type, 
       p.address, p.emergency_contact, u.phone 
FROM Patients p 
JOIN Users u ON p.user_id = u.id 
ORDER BY u.name;

-- Get patient by ID
SELECT * FROM Patients WHERE id = ?;

-- Insert patient
INSERT INTO Patients (id, user_id, dob, gender, blood_type, address, emergency_contact) 
VALUES (?, ?, ?, ?, ?, ?, ?);

-- Update patient
UPDATE Patients SET user_id = ?, dob = ?, gender = ?, blood_type = ?, 
address = ?, emergency_contact = ? WHERE id = ?;

-- Delete patient by ID
DELETE FROM Patients WHERE id = ?;

-- Count patients
SELECT COUNT(*) FROM Users WHERE role = 'patient';

################################################################################
##                          4. APPOINTMENTSERVICE.JAVA                        ##
################################################################################

-- Insert appointment
INSERT INTO Appointments (id, patient_id, doctor_id, appointment_date, time_slot, type, status) 
VALUES (?, ?, ?, ?, ?, ?, ?);

-- Get all appointments
SELECT id, patient_id, doctor_id, appointment_date, time_slot AS timeSlot, type, status FROM Appointments;

-- Delete appointment
DELETE FROM Appointments WHERE id = ?;

-- Get appointments by patient ID
SELECT id, patient_id, doctor_id, appointment_date, time_slot AS timeSlot, type, status FROM Appointments WHERE patient_id = ?;

-- Get appointment details by patient ID with joins
SELECT a.id,
       a.doctor_id AS doctorId,
       u.name AS doctorName,
       dpt.id AS departmentId,
       dpt.name AS departmentName,
       spec.name AS specialization,
       TO_CHAR(a.appointment_date, 'YYYY-MM-DD') AS appointmentDate,
       a.time_slot AS timeSlot,
       a.status
FROM Appointments a
JOIN Doctors doc ON a.doctor_id = doc.id
JOIN Users u ON doc.user_id = u.id
LEFT JOIN Departments dpt ON doc.department_id = dpt.id
LEFT JOIN Doctor_Specializations ds ON doc.id = ds.doctor_id
LEFT JOIN Specializations spec ON ds.specialization_id = spec.id
WHERE a.patient_id = ?
ORDER BY a.appointment_date DESC, a.time_slot;

-- Get patient ID by user ID
SELECT id FROM Patients WHERE user_id = ?;

-- Get all appointments with names
SELECT a.id, a.patient_id, a.doctor_id, 
       u_pat.name AS patient_name,
       u_doc.name AS doctor_name,
       a.appointment_date, a.time_slot, a.type, a.status
FROM Appointments a
LEFT JOIN Patients p ON a.patient_id = p.id
LEFT JOIN Users u_pat ON p.user_id = u_pat.id
LEFT JOIN Doctors d ON a.doctor_id = d.id
LEFT JOIN Users u_doc ON d.user_id = u_doc.id
ORDER BY a.appointment_date DESC;

################################################################################
##                           5. USERSSERVICE.JAVA                             ##
################################################################################

-- Find user by email (for login)
SELECT * FROM Users WHERE email = ?;

-- Get all users
SELECT * FROM Users;

-- Get user by ID
SELECT * FROM Users WHERE id = ?;

-- Update existing user
UPDATE Users SET name = ?, email = ?, password = ?, phone = ?, role = ? WHERE id = ?;

-- Insert new user
INSERT INTO Users (id, name, email, password, phone, created_at, role) VALUES (?, ?, ?, ?, ?, ?, ?);

-- Delete user
DELETE FROM Users WHERE id = ?;

################################################################################
##                           6. BILLSERVICE.JAVA                              ##
################################################################################

-- Get bills by user ID with joins
SELECT b.id, b.patient_id, b.appointment_id, b.total_amount, b.status, b.issue_date, 
       u_doc.name as doctor_name, u_pat.name as patient_name, 
       a.type as appointment_type, d.name as department_name, a.appointment_date 
FROM Bills b 
JOIN Appointments a ON b.appointment_id = a.id 
JOIN Doctors doc ON a.doctor_id = doc.id 
JOIN Users u_doc ON doc.user_id = u_doc.id 
JOIN Departments d ON doc.department_id = d.id 
JOIN Patients p ON b.patient_id = p.id 
JOIN Users u_pat ON p.user_id = u_pat.id 
WHERE p.user_id = ?;

-- Get all bills
SELECT b.id, b.patient_id, b.appointment_id, b.total_amount, b.status, b.issue_date, 
       u_doc.name as doctor_name, u_pat.name as patient_name, 
       a.type as appointment_type, d.name as department_name, a.appointment_date 
FROM Bills b 
JOIN Appointments a ON b.appointment_id = a.id 
JOIN Doctors doc ON a.doctor_id = doc.id 
JOIN Users u_doc ON doc.user_id = u_doc.id 
JOIN Departments d ON doc.department_id = d.id 
JOIN Patients p ON b.patient_id = p.id 
JOIN Users u_pat ON p.user_id = u_pat.id 
ORDER BY b.issue_date DESC;

-- Get bill items
SELECT id, bill_id, description, amount FROM Bill_Items WHERE bill_id = ?;

################################################################################
##                        7. PRESCRIPTIONSERVICE.JAVA                         ##
################################################################################

-- Get prescriptions by patient ID with joins
SELECT p.id, p.appointment_id, p.doctor_id, p.patient_id, p.notes, p.date_issued, 
       u_doc.name AS doctor_name, u_pat.name AS patient_name 
FROM Prescriptions p 
JOIN Doctors d ON p.doctor_id = d.id 
JOIN Users u_doc ON d.user_id = u_doc.id 
JOIN Patients pa ON p.patient_id = pa.id 
JOIN Users u_pat ON pa.user_id = u_pat.id 
WHERE p.patient_id = ?;

-- Get all prescriptions with joins
SELECT p.id, p.appointment_id, p.doctor_id, p.patient_id, p.notes, p.date_issued, 
       u_doc.name AS doctor_name, u_pat.name AS patient_name 
FROM Prescriptions p 
JOIN Doctors d ON p.doctor_id = d.id 
JOIN Users u_doc ON d.user_id = u_doc.id 
JOIN Patients pa ON p.patient_id = pa.id 
JOIN Users u_pat ON pa.user_id = u_pat.id 
ORDER BY p.date_issued DESC;

-- Get medications for prescriptions
SELECT pm.prescription_id, m.id AS med_id, m.medicine_name, m.dosage, m.duration 
FROM Pres_Med pm 
JOIN Medications m ON pm.medication_id = m.id 
WHERE pm.prescription_id IN (?);

################################################################################
##                          8. LABTESTSERVICE.JAVA                            ##
################################################################################

-- Get patient ID from user ID
SELECT id FROM Patients WHERE user_id = ?;

-- Get lab tests by patient ID
SELECT lt.id, lt.test_type, lt.test_date, lt.result, lt.file_url, u.name as doctor_name 
FROM Lab_Tests lt 
LEFT JOIN Doctors d ON lt.doctor_id = d.id 
LEFT JOIN Users u ON d.user_id = u.id 
WHERE lt.patient_id = ?;

-- Get all lab tests
SELECT lt.id, lt.test_type, lt.test_date, lt.result, lt.file_url, 
       u.name as doctor_name, p_user.name as patient_name 
FROM Lab_Tests lt 
LEFT JOIN Doctors d ON lt.doctor_id = d.id 
LEFT JOIN Users u ON d.user_id = u.id 
LEFT JOIN Patients p ON lt.patient_id = p.id 
LEFT JOIN Users p_user ON p.user_id = p_user.id 
ORDER BY lt.test_date DESC;

################################################################################
##                       9. MEDICALRECORDSERVICE.JAVA                         ##
################################################################################

-- Get medical records for patient
SELECT a.id, a.appointment_date, a.type, 
       u_doc.name AS doctor_name, 
       dept.name AS department_name
FROM Appointments a
JOIN Doctors d ON a.doctor_id = d.id
JOIN Users u_doc ON d.user_id = u_doc.id
LEFT JOIN Departments dept ON d.department_id = dept.id
WHERE a.patient_id = ?
ORDER BY a.appointment_date DESC;

-- Get patient ID by user ID
SELECT id FROM Patients WHERE user_id = ?;

-- Get patient medical history
SELECT a.id, a.appointment_date, a.type, 
       u_doc.name AS doctor_name, 
       dept.name AS department_name,
       p.notes AS prescription_notes,
       p.date_issued AS prescription_date,
       lt.test_type, lt.result AS test_result, lt.test_date
FROM Appointments a
JOIN Doctors d ON a.doctor_id = d.id
JOIN Users u_doc ON d.user_id = u_doc.id
LEFT JOIN Departments dept ON d.department_id = dept.id
LEFT JOIN Prescriptions p ON a.id = p.appointment_id
LEFT JOIN Lab_Tests lt ON a.patient_id = lt.patient_id
WHERE a.patient_id = ?
ORDER BY a.appointment_date DESC;

################################################################################
##                         10. FEEDBACKSERVICE.JAVA                           ##
################################################################################

-- Get patient ID from user ID
SELECT id FROM Patients WHERE user_id = ?;

-- Insert feedback
INSERT INTO Feedback (id, patient_id, target_type, target_id, rating, comments, date_submitted) 
VALUES (?, ?, ?, ?, ?, ?, ?);

-- Get feedback with patient details
SELECT f.id, f.patient_id, f.target_type, f.target_id, 
       f.rating, f.comments, f.date_submitted,
       u.name as patient_name,
       CASE 
           WHEN f.target_type = 'doctor' THEN (SELECT u2.name FROM Doctors d2 JOIN Users u2 ON d2.user_id = u2.id WHERE d2.id = f.target_id)
           WHEN f.target_type = 'department' THEN (SELECT name FROM Departments WHERE id = f.target_id)
           ELSE NULL
       END as target_name
FROM Feedback f
JOIN Patients p ON f.patient_id = p.id
JOIN Users u ON p.user_id = u.id
ORDER BY f.date_submitted DESC;

################################################################################
##                        11. AMBULANCESERVICE.JAVA                           ##
################################################################################

-- Get all ambulances
SELECT id, vehicle_number as vehicleNumber, status, location, branch_id as branchId FROM Ambulances;

-- Get ambulance by ID
SELECT id, vehicle_number as vehicleNumber, status, location, branch_id as branchId FROM Ambulances WHERE id = ?;

-- Update ambulance
UPDATE Ambulances SET vehicle_number = ?, status = ?, location = ?, branch_id = ? WHERE id = ?;

-- Insert ambulance
INSERT INTO Ambulances (id, vehicle_number, status, location, branch_id) VALUES (?, ?, ?, ?, ?);

-- Delete ambulance
DELETE FROM Ambulances WHERE id = ?;

################################################################################
##                    12. AMBULANCEREQUESTSERVICE.JAVA                        ##
################################################################################

-- Get patient ID from user ID
SELECT id FROM Patients WHERE user_id = ?;

-- Get available ambulance
SELECT id FROM Ambulances WHERE status = 'Available' AND ROWNUM = 1;

-- Insert ambulance request
INSERT INTO Ambulance_Requests (id, patient_id, ambulance_id, request_time, pickup_location, drop_location, status) 
VALUES (?, ?, ?, ?, ?, ?, ?);

################################################################################
##                      13. HOSPITALBRANCHSERVICE.JAVA                        ##
################################################################################

-- Insert hospital branch
INSERT INTO Hospital_Branches (id, name, address, established_date) VALUES (?, ?, ?, ?);

-- Insert branch contact
INSERT INTO Branch_Contacts (id, branch_id, contact_number, type) VALUES (?, ?, ?, ?);

-- Get all hospital branches
SELECT * FROM Hospital_Branches;

-- Get hospital branch by ID
SELECT * FROM Hospital_Branches WHERE id = ?;

-- Delete branch contacts
DELETE FROM Branch_Contacts WHERE branch_id = ?;

-- Delete hospital branch
DELETE FROM Hospital_Branches WHERE id = ?;

-- Count hospital branches
SELECT COUNT(*) FROM Hospital_Branches;

-- Get branch contacts
SELECT * FROM Branch_Contacts WHERE branch_id = ?;

################################################################################
##                           14. ROOMSERVICE.JAVA                             ##
################################################################################

-- Get all rooms
SELECT id, room_number, type, status FROM Rooms;

-- Get room by ID
SELECT id, room_number, type, status FROM Rooms WHERE id = ?;

-- Update room
UPDATE Rooms SET room_number = ?, type = ?, status = ? WHERE id = ?;

-- Insert room
INSERT INTO Rooms (id, room_number, type, status) VALUES (?, ?, ?, ?);

-- Delete room
DELETE FROM Rooms WHERE id = ?;

################################################################################
##                         15. EQUIPMENTSERVICE.JAVA                          ##
################################################################################

-- Get all equipment
SELECT * FROM EQUIPMENT WHERE ACTIVE = 1 ORDER BY EQUIPMENT_NAME;

-- Get equipment by ID
SELECT * FROM EQUIPMENT WHERE ID = ? AND ACTIVE = 1;

-- Insert equipment
INSERT INTO EQUIPMENT (ID, EQUIPMENT_NAME, EQUIPMENT_TYPE, MANUFACTURER, 
MODEL, CONDITION_STATUS, PURCHASE_DATE, DEPARTMENT_ID, ACTIVE) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?, 1);

-- Update equipment
UPDATE EQUIPMENT SET EQUIPMENT_NAME = ?, EQUIPMENT_TYPE = ?, 
MANUFACTURER = ?, MODEL = ?, CONDITION_STATUS = ?, 
PURCHASE_DATE = ?, DEPARTMENT_ID = ? WHERE ID = ?;

-- Soft delete equipment
UPDATE EQUIPMENT SET ACTIVE = 0 WHERE ID = ?;

################################################################################
##                          16. SIGNUPSERVICE.JAVA                            ##
################################################################################

-- Check if email exists
SELECT COUNT(*) FROM USERS WHERE EMAIL = ?;

-- Insert new user
INSERT INTO USERS (ID, NAME, EMAIL, PASSWORD, PHONE, ROLE, CREATED_AT) 
VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP);

-- Get user ID by email
SELECT ID FROM USERS WHERE EMAIL = ?;

-- Insert patient record
INSERT INTO PATIENTS (ID, USER_ID, DOB, GENDER, BLOOD_TYPE, ADDRESS, EMERGENCY_CONTACT) 
VALUES (?, ?, ?, ?, ?, ?, ?);

################################################################################
##                          17. STAFFSERVICE.JAVA                             ##
################################################################################

-- Get all staff
SELECT * FROM Staff;

-- Get staff by ID
SELECT * FROM Staff WHERE id = ?;

-- Insert staff
INSERT INTO Staff (id, user_id, branch_id, designation, department_id) VALUES (?, ?, ?, ?, ?);

-- Update staff
UPDATE Staff SET user_id = ?, branch_id = ?, designation = ?, department_id = ? WHERE id = ?;

-- Delete staff
DELETE FROM Staff WHERE id = ?;

################################################################################
##                        18. INSURANCESERVICE.JAVA                           ##
################################################################################

-- Get insurance policies
SELECT * FROM Insurance_Policies;

-- Get insurance policy by ID
SELECT * FROM Insurance_Policies WHERE id = ?;

-- Insert insurance policy
INSERT INTO Insurance_Policies (id, policy_name, provider, coverage_amount, premium) VALUES (?, ?, ?, ?, ?);

-- Update insurance policy
UPDATE Insurance_Policies SET policy_name = ?, provider = ?, coverage_amount = ?, premium = ? WHERE id = ?;

-- Delete insurance policy
DELETE FROM Insurance_Policies WHERE id = ?;

################################################################################
##                          19. STATSSERVICE.JAVA                             ##
################################################################################

-- Get total counts for dashboard
SELECT 
    (SELECT COUNT(*) FROM Users WHERE role = 'doctor') as doctor_count,
    (SELECT COUNT(*) FROM Users WHERE role = 'patient') as patient_count,
    (SELECT COUNT(*) FROM Appointments) as appointment_count,
    (SELECT COUNT(*) FROM Bills) as bill_count,
    (SELECT COUNT(*) FROM Rooms) as room_count,
    (SELECT COUNT(*) FROM Hospital_Branches) as branch_count
FROM DUAL;

-- Get monthly statistics
SELECT 
    TO_CHAR(created_at, 'YYYY-MM') as month,
    COUNT(*) as count
FROM Users 
WHERE role = 'patient' 
GROUP BY TO_CHAR(created_at, 'YYYY-MM')
ORDER BY month;

-- Get appointment statistics by status
SELECT status, COUNT(*) as count 
FROM Appointments 
GROUP BY status;

-- Get revenue statistics
SELECT 
    TO_CHAR(issue_date, 'YYYY-MM') as month,
    SUM(total_amount) as revenue
FROM Bills 
WHERE status = 'paid'
GROUP BY TO_CHAR(issue_date, 'YYYY-MM')
ORDER BY month;

================================================================================
                                   END OF FILE
================================================================================
Total SQL Queries Extracted: 100+
Services Covered: 19
Last Updated: July 30, 2025

Note: This file contains all major SQL queries used across the HospiTrack 
application's service layer. Some queries may use prepared statement parameters 
(?) which should be replaced with actual values during execution.
================================================================================

